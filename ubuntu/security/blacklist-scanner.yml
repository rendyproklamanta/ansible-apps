- name: Block IPs from GitHub source using ipset
  hosts: localhost
  connection: local
  become: true

  tasks:
    - name: Ensure required packages are installed
      apt:
        name:
          - ipset
          - curl
        state: present
        update_cache: yes

    - name: Fetch deny_ips.txt from GitHub
      get_url:
        url: https://raw.githubusercontent.com/fistwho/ipscanner-block-ufw/main/deny_ips.txt
        dest: /tmp/deny_ips.txt
        mode: '0644'

    - name: Filter valid IP addresses
      shell: |
        grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]+)?$|^([a-fA-F0-9:]+:+)+[a-fA-F0-9]+(/[0-9]+)?$' /tmp/deny_ips.txt
      register: valid_ips

    - name: Create ipset blocklist
      command: ipset create scanner_blacklist hash:net
      ignore_errors: yes

    - name: Add valid IPs to ipset blocklist
      shell: |
        for ip in {{ valid_ips.stdout_lines | join(' ') }}; do
          ipset add scanner_blacklist "$ip";
        done
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Integrate ipset with iptables
      command: iptables -I INPUT -m set --match-set scanner_blacklist src -j DROP

    - name: Save ipset rules to file
      shell: ipset save > /etc/ipset.rules

    - name: Ensure iptables directory exists
      file:
        path: /etc/iptables
        state: directory
        mode: '0755'

    - name: Save iptables rules
      shell: iptables-save > /etc/iptables/rules.v4

    - name: Create systemd service for ipset restore
      copy:
        dest: /etc/systemd/system/ipset-restore.service
        content: |
          [Unit]
          Description=Restore ipset rules
          Before=network-pre.target
          Wants=network-pre.target

          [Service]
          Type=oneshot
          ExecStartPre=/bin/bash -c 'grep -E "^\s*(add\s+scanner_blacklist)" /etc/ipset.rules | while read -r line; do ipset $line; done'
          ExecStop=/sbin/ipset flush
          RemainAfterExit=yes

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd configuration
      command: systemctl daemon-reload

    - name: Enable and start ipset-restore service
      systemd:
        name: ipset-restore
        enabled: yes
        state: started

    - name: Check ipset-restore service status
      command: systemctl status ipset-restore --no-pager
      register: ipset_restore_status
      ignore_errors: yes

    - name: Show ipset-restore service status
      debug:
        var: ipset_restore_status.stdout

## Check status
## systemctl status ipset-restore